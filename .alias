# Helpful aliases
alias c='clear' # clear terminal
alias l='eza -lh --icons=auto' # long list
alias ld='eza -lhD --icons=auto' # long list dirs
# alias un='$aurhelper -Rns' # uninstall package
# alias up='$aurhelper -Syu' # update system/package/aur
# alias pl='$aurhelper -Qs' # list installed package
# alias pa='$aurhelper -Ss' # list available package
# alias pc='$aurhelper -Sc' # remove unused cache
# alias po='$aurhelper -Qtdq | $aurhelper -Rns -' # remove unused packages, also try > $aurhelper -Qqd | $aurhelper -Rsu --print -
alias vc='code' # gui code editor


alias lz='ls'
alias ls='eza -a --icons'
alias ll='eza -al --icons'
alias lt='eza -a --tree --level=1 --icons'


### aliases
function update() {
    echo "🔄 Checking for updates..."

    # Update system packages
    sudo pacman -Syu
    pacman_status=$?

    if [[ $pacman_status -eq 0 ]]; then
        if pacman -Qu | grep -q .; then
            echo "✅ System packages updated successfully!"
        else
            echo "ℹ️ No updates available for system packages."
        fi
    else
        echo "❌ Failed to update system packages!"
        return 1
    fi

    # Check if yay is installed
    if command -v yay &>/dev/null; then
        echo "🔄 Checking for AUR updates..."
        yay -Syu
        yay_status=$?

        if [[ $yay_status -eq 0 ]]; then
            if yay -Qu | grep -q .; then
                echo "✅ AUR packages updated successfully!"
            else
                echo "ℹ️ No updates available for AUR packages."
            fi
        else
            echo "❌ Failed to update AUR packages!"
            return 1
        fi
    else
        echo "⚠️ yay is not installed! Skipping AUR updates..."
    fi

    echo "🎉 System update process completed!"
}



# Install one or more packages
function install() {
    if [[ $# -eq 0 ]]; then
        echo "❌ Please specify a package to install."
        return 1
    fi

    echo "🔄 Installing: $* ..."
    sudo pacman -S "$@"

    if [[ $? -eq 0 ]]; then
        echo "✅ Installation successful!"
    else
        echo "❌ Installation failed!"
    fi
}

# Remove a package
function remove() {
    if [[ $# -eq 0 ]]; then
        echo "❌ Please specify a package to remove."
        return 1
    fi

    echo "🗑️ Removing: $* ..."
    sudo pacman -R "$@"

    if [[ $? -eq 0 ]]; then
        echo "✅ Package removed successfully!"
    else
        echo "❌ Failed to remove package!"
    fi
}

# Remove a package and its dependencies
function remove_deps() {
    if [[ $# -eq 0 ]]; then
        echo "❌ Please specify a package to remove along with dependencies."
        return 1
    fi

    echo "🗑️ Removing package and dependencies: $* ..."
    sudo pacman -Rns "$@"

    if [[ $? -eq 0 ]]; then
        echo "✅ Package and dependencies removed successfully!"
    else
        echo "❌ Failed to remove package and dependencies!"
    fi
}

# Search for a package in the repositories
function search() {
    if [[ $# -eq 0 ]]; then
        echo "❌ Please specify a package to search for."
        return 1
    fi

    echo "🔎 Searching for: $* ..."
    pacman -Ss "$@"

    if [[ $? -eq 0 ]]; then
        echo "✅ Search completed!"
    else
        echo "❌ Search failed!"
    fi
}

# List installed packages
function list() {
    echo "📦 Listing installed packages..."
    pacman -Q

    if [[ $? -eq 0 ]]; then
        echo "✅ Packages listed successfully!"
    else
        echo "❌ Failed to list packages!"
    fi
}

# Show information about a specific package
function info() {
    if [[ $# -eq 0 ]]; then
        echo "❌ Please specify a package to get info."
        return 1
    fi

    echo "ℹ️ Getting information for: $* ..."
    pacman -Qi "$@"

    if [[ $? -eq 0 ]]; then
        echo "✅ Package info displayed successfully!"
    else
        echo "❌ Failed to retrieve package info!"
    fi
}

# Install one or more AUR packages
function aur_install() {
    if [[ $# -eq 0 ]]; then
        echo "❌ Please specify an AUR package to install."
        return 1
    fi

    echo "🔄 Installing AUR package(s): $* ..."
    yay -S "$@"

    if [[ $? -eq 0 ]]; then
        echo "✅ AUR package(s) installed successfully!"
    else
        echo "❌ Failed to install AUR package(s)!"
    fi
}

# Remove an AUR package
function aur_remove() {
    if [[ $# -eq 0 ]]; then
        echo "❌ Please specify an AUR package to remove."
        return 1
    fi

    echo "🗑️ Removing AUR package: $* ..."
    yay -R "$@"

    if [[ $? -eq 0 ]]; then
        echo "✅ AUR package removed successfully!"
    else
        echo "❌ Failed to remove AUR package!"
    fi
}

# Remove an AUR package and its dependencies
function aur_remove_deps() {
    if [[ $# -eq 0 ]]; then
        echo "❌ Please specify an AUR package to remove along with dependencies."
        return 1
    fi

    echo "🗑️ Removing AUR package and dependencies: $* ..."
    yay -Rns "$@"

    if [[ $? -eq 0 ]]; then
        echo "✅ AUR package and dependencies removed successfully!"
    else
        echo "❌ Failed to remove AUR package and dependencies!"
    fi
}

# Search for an AUR package
function aur_search() {
    if [[ $# -eq 0 ]]; then
        echo "❌ Please specify an AUR package to search for."
        return 1
    fi

    echo "🔎 Searching for AUR package: $* ..."
    yay -Ss "$@"

    if [[ $? -eq 0 ]]; then
        echo "✅ Search completed!"
    else
        echo "❌ Search failed!"
    fi
}

# List installed AUR packages
function aur_list() {
    echo "📦 Listing installed AUR packages..."
    yay -Qm  # Lists only AUR packages

    if [[ $? -eq 0 ]]; then
        echo "✅ Installed AUR packages listed successfully!"
    else
        echo "❌ Failed to list AUR packages!"
    fi
}

# Show information about a specific AUR package
function aur_info() {
    if [[ $# -eq 0 ]]; then
        echo "❌ Please specify an AUR package to get info."
        return 1
    fi

    echo "ℹ️ Getting information for AUR package: $* ..."
    yay -Qi "$@"

    if [[ $? -eq 0 ]]; then
        echo "✅ Package info displayed successfully!"
    else
        echo "❌ Failed to retrieve package info!"
    fi
}




### bindings
alias cat='bat'
alias vim='nvim'
alias cls='clear'

# Directory navigation shortcuts
alias ..='cd ..'
alias ...='cd ../..'
alias .3='cd ../../..'
alias .4='cd ../../../..'
alias .5='cd ../../../../..'

# Always mkdir a path (this doesn't inhibit functionality to make a single dir)
alias mkdir='mkdir -p'


# git aliases
#alias ga='git add'
#alias gaa='git add all'
#alias gco='git checkout'
#alias gcb='git checkout -b'
#alias gcmsg='git commit --message'
#alias gd='git diff'
#alias gl='git pull'
#alias gp='git push'
#alias gpsup='git push --set-upstream origin $(git_current_branch)'
#alias gst='git status'


alias open="xdg-open $1"
alias opendir="nautilus ."


alias docker="sudo docker"

function dockerstart() {
    echo "Starting Docker..."
    sudo systemctl start docker

    if [[ $? -eq 0 ]]; then
        echo "✅ Docker started successfully!"
    else
        echo "❌ Failed to start Docker!"
    fi
}

function dockerstop() {
    echo "Stopping Docker and its socket..."
    sudo systemctl stop docker.socket
    sudo systemctl stop docker.service

    if ! systemctl is-active --quiet docker && ! systemctl is-active --quiet docker.socket; then
        echo "✅ Docker and its socket stopped successfully!"
    else
        echo "❌ Failed to stop Docker or its socket!"
    fi
}




function dockerlist() {
    echo "Listing running Docker containers..."
    sudo docker container ls

    if [[ $? -eq 0 ]]; then
        echo "✅ Docker containers listed successfully!"
    else
        echo "❌ Failed to list Docker containers!"
    fi
}


function pgstart() {
    echo "🚀 Starting PostgreSQL..."
    echo
    sudo docker start postgresql

    if [[ $? -eq 0 ]]; then
        sudo docker ps -f name=postgresql
        echo "✅ PostgreSQL container started."
    else
        echo "❌ Failed to start PostgreSQL container."
        return 1
    fi

    echo "🚀 Starting pgAdmin4..."
    sudo docker start pgAdmin

    if [[ $? -eq 0 ]]; then
        echo "✅ pgAdmin container started."
    else
        echo "❌ Failed to start pgAdmin container."
        return 1
    fi

    local ip=$(sudo docker inspect postgresql | grep -Po '\"IPAddress\":\s*\"\K[0-9.]+' | head -n 1)
    local pgadmin_ip=$(sudo docker inspect pgAdmin | grep -Po '\"IPAddress\":\s*\"\K[0-9.]+' | head -n 1)

    echo
    echo "🧠 PostgreSQL IP Address: $ip"
    echo "🔧 Connection string: postgres://pguser:pgpass@${ip}:5432/potgres"
    echo
    echo "🌐 pgAdmin IP Address: $pgadmin_ip"
    echo "🔐 Login: drunkleen@local.com / 12345"
    echo "🌍 pgAdmin URL: http://${pgadmin_ip}:80"
}


function pgstop() {
    echo "🛑 Stopping PostgreSQL..."
    sudo docker stop postgresql && echo "✅ PostgreSQL container stopped." || echo "❌ Failed to stop PostgreSQL."

    echo "🛑 Stopping pgAdmin..."
    sudo docker stop pgAdmin && echo "✅ pgAdmin container stopped." || echo "❌ Failed to stop pgAdmin."
}



function mongostart() {
    echo "🚀 Starting MongoDB..."
    echo
    sudo docker start mongodb

    if [[ $? -eq 0 ]]; then
        sudo docker ps -f name=mongodb
        echo "✅ MongoDB container started."
        echo "🔗 URL: mongodb://localhost:27017"
        echo "🌐 IP Address: 127.0.0.1"
    else
        echo "❌ Failed to start MongoDB container."
    fi
}

function mongostop() {
    echo "🛑 Stopping MongoDB..."
    sudo docker stop mongodb && echo "✅ MongoDB container stopped." || echo "❌ Failed to stop MongoDB."
}




function searxstart() {
    echo "🚀 Starting SearX..."
    sudo docker start searx

    if [[ $? -eq 0 ]]; then
        sudo docker ps -f name=searx
        echo "✅ SearX container started."
        echo -e "🔗 \e]8;;http://127.0.0.1:80\e\\SearX Engine Running\e]8;;\e\\"
    else
        echo "❌ Failed to start SearX container."
    fi
}

function searxstop() {
    echo "🛑 Stopping SearX..."
    sudo docker stop searx && echo "✅ SearX container stopped." || echo "❌ Failed to stop SearX."
}

function redisstart() {
    echo "🚀 Starting Redis..."
    sudo docker start redis

    if [[ $? -eq 0 ]]; then
        sudo docker ps -f name=redis
        echo "✅ Redis container started."
        
        # Get the container's IP address
        local ip=$(sudo docker inspect redis | grep -Po '\"IPAddress\":\s*\"\K[0-9.]+' | head -n 1)

        echo "🔗 Redis connection URL: redis://$ip:6379"
        echo "🌐 IP Address: $ip"
    else
        echo "❌ Failed to start Redis container."
    fi
}

function redisstop() {
    echo "🛑 Stopping Redis..."
    sudo docker stop redis && echo "✅ Redis container stopped." || echo "❌ Failed to stop Redis."
}


function ollama_pull() {
    if [[ $# -eq 0 ]]; then
        echo "❌ Please specify a model to pull (e.g., llama2, mistral)."
        return 1
    fi

    echo "📥 Pulling model: $1 ..."
    sudo docker exec ollama ollama pull "$1"

    if [[ $? -eq 0 ]]; then
        echo "✅ Model '$1' pulled successfully."
    else
        echo "❌ Failed to pull model '$1'."
    fi
}


function ollama_delete() {
    if [[ $# -eq 0 ]]; then
        echo "❌ Please specify a model to delete."
        return 1
    fi

    echo "🗑️ Deleting model: $1 ..."
    sudo docker exec ollama ollama delete "$1"

    if [[ $? -eq 0 ]]; then
        echo "✅ Model '$1' deleted successfully."
    else
        echo "❌ Failed to delete model '$1'."
    fi
}



function ollama_list() {
    echo "📂 Listing installed models..."
    sudo docker exec ollama ollama list
}



function ollama_bootstrap() {
    local models=("deepseek-r1" "llama3.2")

    for model in "${models[@]}"; do
        echo "📥 Pulling model: $model ..."
        sudo docker exec ollama ollama pull "$model"
        if [[ $? -eq 0 ]]; then
            echo "✅ Model '$model' pulled successfully."
        else
            echo "❌ Failed to pull model '$model'."
        fi
    done
}


function ollama_preload() {
    local models=("deepseek-r1" "llama3.2")

    for model in "${models[@]}"; do
        echo "⚙️ Loading model '$model' into memory..."
        sudo docker exec ollama ollama run "$model" <<< "Hello"
        if [[ $? -eq 0 ]]; then
            echo "✅ Model '$model' loaded successfully."
        else
            echo "❌ Failed to load model '$model'."
        fi
    done
}

function ollama_chat() {
    if [[ $# -lt 2 ]]; then
        echo "❌ Usage: ollama_chat <model> <prompt>"
        echo "👉 Example: ollama_chat deepseek-r1 'Write a Python function to sort a list.'"
        return 1
    fi

    local model="$1"
    shift
    local prompt="$*"

    echo "🧠 Chatting with model '$model'..."
    sudo docker exec -i ollama ollama run "$model" <<< "$prompt"
}

function ollamastart() {
    echo "🚀 Starting Ollama..."
    sudo docker start ollama && echo "✅ Ollama started." || echo "❌ Ollama failed to start."

    echo "🚀 Starting Open WebUI..."
    sudo docker start open-webui && echo "✅ Open WebUI started." || echo "❌ Open WebUI failed to start."
}

function ollamastop() {
    echo "🛑 Stopping Open WebUI..."
    sudo docker stop open-webui && echo "✅ WebUI stopped." || echo "❌ Failed to stop WebUI."

    echo "🛑 Stopping Ollama..."
    sudo docker stop ollama && echo "✅ Ollama stopped." || echo "❌ Failed to stop Ollama."
}

function ollama_ip() {
    local ip=$(sudo docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ollama)
    echo "🌐 Ollama container IP: http://$ip:11434"
}

function openwebui_ip() {
    local ip=$(sudo docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' open-webui)
    echo "🌐 Open WebUI container IP: http://$ip:8080"
}

function gpt_start() {
    echo "🚀 Starting GPT..."
    ollamastart
    ollama_preload
    ollama_ip
    openwebui_ip
}

function gpt_stop() {
    echo "🛑 Stopping GPT..."
    ollamastop
}



function initmvn() {
    CURRENT_DIR=$(pwd)
    echo "Initializing Maven Project $1"

    if [ -d "$FOLDER_PATH" ]; then
        echo "❌ Directory exists: $1"
        echo "❌ Failed to initialize Maven project!"
        exit 1
    fi

    mkdir $1
    
    mvn archetype:generate -DgroupId=com.drunkleen.$1 -DartifactId=$1 -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=1.5 -DinteractiveMode=false

    touch ./$1/.env

        curl -sS --fail -o ./$1/.gitignore https://raw.githubusercontent.com/github/gitignore/refs/heads/main/Maven.gitignore || { echo "Failed to fetch .gitignore"; exit 1; }

    if [[ $? -eq 0 ]]; then
        echo "✅ Maven project successfully initialized."
    else
        echo "❌ Failed to initialize Maven project!"
    fi
    
    cd $CURRENT_DIR
}


function initgo() {
    CURRENT_DIR=$(pwd)
    echo "Initializing Go Project $1..."

    if [ -d "$FOLDER_PATH" ]; then
        echo "❌ Directory exists: $1"
        echo "❌ Failed to initialize Go project!"
        exit 1
    fi

    mkdir $1
    cd $1

    go mod init "github.com/drunkleen/$1"

    touch main.go
    touch .env

    curl -sS --fail -o .gitignore https://raw.githubusercontent.com/github/gitignore/refs/heads/main/community/Golang/Go.AllowList.gitignore || { echo "Failed to fetch .gitignore"; exit 1; }

    if [[ $? -eq 0 ]]; then
        echo "✅ Go project successfully initialized."
    else
        echo "❌ Failed to initialize Go project!"
    fi

    cd $CURRENT_DIR
}

